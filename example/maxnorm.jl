using TSSOS
using DynamicPolynomials

# Smaleâ€™s Mean Value Conjecture
n = 2
@polyvar z1 z2 z3 z4 z5 z6
z = tuple(z1,z2,z3,z4,z5,z6)
f = - z3*z6
g1 = z1^2*z4^2 - z1^2 - z4^2 - 4*z3*z6 + 1
g2 = z2^2*z5^2 - z2^2 - z5^2 - 4*z3*z6 + 1
h1 = - z1*z4 - z2*z5 + 2/3
h2 = 3*z1*z2 + 3*z4*z5 - 2
h3 = 9*z1*z2*z4*z5 - 1
cpop = [f; g1; g2; h1; h2; h3]

@time begin
opt,sol,data = cs_tssos_first(cpop, z, 3, 2, numeq=3, CS=false, TS="block", QUIET=true)
end
println(sqrt(-opt))

n = 3
@polyvar z1 z2 z3 z4 z5 z6 z7 z8
z = tuple(z1,z2,z3,z4,z5,z6,z7,z8)
f = - z4*z8
g1 = 9 - 6*z1^3 + 12*z1^2*z2 + 12*z1^2*z3 - 6*z5^3 + 4*z1^3*z5^3 -
 8*z1^2*z2*z5^3 - 8*z1^2*z3*z5^3 + 12*z5^2*z6 -
   8*z1^3*z5^2*z6 + 16*z1^2*z2*z5^2*z6 + 16*z1^2*z3*z5^2*z6 +
 12*z5^2*z7 - 8*z1^3*z5^2*z7 + 16*z1^2*z2*z5^2*z7 +
   16*z1^2*z3*z5^2*z7 - 36*z4*z8
g2 = 9 + 12*z1*z2^2 - 6*z2^3 + 12*z2^2*z3 + 12*z5*z6^2 +
 16*z1*z2^2*z5*z6^2 - 8*z2^3*z5*z6^2 + 16*z2^2*z3*z5*z6^2 -
   6*z6^3 - 8*z1*z2^2*z6^3 + 4*z2^3*z6^3 - 8*z2^2*z3*z6^3 +
 12*z6^2*z7 + 16*z1*z2^2*z6^2*z7 - 8*z2^3*z6^2*z7 +
   16*z2^2*z3*z6^2*z7 - 36*z4*z8
g3 = 9 + 12*z1*z3^2 + 12*z2*z3^2 - 6*z3^3 + 12*z5*z7^2 +
 16*z1*z3^2*z5*z7^2 + 16*z2*z3^2*z5*z7^2 - 8*z3^3*z5*z7^2 +
   12*z6*z7^2 + 16*z1*z3^2*z6*z7^2 + 16*z2*z3^2*z6*z7^2 -
 8*z3^3*z6*z7^2 - 6*z7^3 - 8*z1*z3^2*z7^3 -
   8*z2*z3^2*z7^3 + 4*z3^3*z7^3 - 36*z4*z8
h1 = z1*z5 + z2*z6 + z3*z7 - n*(1/(n+1))^(2/n)
h2 = 2*z1*z2*z3 + 2*z5*z6*z7 + 1
h3 = 16*z1*z2*z3*z5*z6*z7 - 1
cpop = [f; g1; g2; g3; h1; h2; h3]

@time begin
opt,sol,data = cs_tssos_first(cpop, z, n+1, 5, numeq=3, CS=false, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true)  
end
println(sqrt(-opt))

n = 4
@polyvar z1 z2 z3 z4 z5 z6 z7 z8 z9 z10
z = tuple(z1,z2,z3,z4,z5,z6,z7,z8,z9,z10)
f = - z5*z10
g1 = 36 - 18*z1^4 + 30*z1^3*z2 + 30*z1^3*z3 - 60*z1^2*z2*z3 + 30*z1^3*z4 - 60*z1^2*z2*z4 - 60*z1^2*z3*z4 - 18*z6^4 +
  9*z1^4*z6^4 - 15*z1^3*z2*z6^4 - 15*z1^3*z3*z6^4 + 30*z1^2*z2*z3*z6^4 - 15*z1^3*z4*z6^4 + 30*z1^2*z2*z4*z6^4 +
  30*z1^2*z3*z4*z6^4 + 30*z6^3*z7 - 15*z1^4*z6^3*z7 + 25*z1^3*z2*z6^3*z7 + 25*z1^3*z3*z6^3*z7 -
  50*z1^2*z2*z3*z6^3*z7 + 25*z1^3*z4*z6^3*z7 - 50*z1^2*z2*z4*z6^3*z7 - 50*z1^2*z3*z4*z6^3*z7 + 30*z6^3*z8 -
  15*z1^4*z6^3*z8 + 25*z1^3*z2*z6^3*z8 + 25*z1^3*z3*z6^3*z8 - 50*z1^2*z2*z3*z6^3*z8 + 25*z1^3*z4*z6^3*z8 -
  50*z1^2*z2*z4*z6^3*z8 - 50*z1^2*z3*z4*z6^3*z8 - 60*z6^2*z7*z8 + 30*z1^4*z6^2*z7*z8 - 50*z1^3*z2*z6^2*z7*z8 -
  50*z1^3*z3*z6^2*z7*z8 + 100*z1^2*z2*z3*z6^2*z7*z8 - 50*z1^3*z4*z6^2*z7*z8 + 100*z1^2*z2*z4*z6^2*z7*z8 +
  100*z1^2*z3*z4*z6^2*z7*z8 + 30*z6^3*z9 - 15*z1^4*z6^3*z9 + 25*z1^3*z2*z6^3*z9 + 25*z1^3*z3*z6^3*z9 -
  50*z1^2*z2*z3*z6^3*z9 + 25*z1^3*z4*z6^3*z9 - 50*z1^2*z2*z4*z6^3*z9 - 50*z1^2*z3*z4*z6^3*z9 - 60*z6^2*z7*z9 +
  30*z1^4*z6^2*z7*z9 - 50*z1^3*z2*z6^2*z7*z9 - 50*z1^3*z3*z6^2*z7*z9 + 100*z1^2*z2*z3*z6^2*z7*z9 -
  50*z1^3*z4*z6^2*z7*z9 + 100*z1^2*z2*z4*z6^2*z7*z9 + 100*z1^2*z3*z4*z6^2*z7*z9 - 60*z6^2*z8*z9 +
  30*z1^4*z6^2*z8*z9 - 50*z1^3*z2*z6^2*z8*z9 - 50*z1^3*z3*z6^2*z8*z9 + 100*z1^2*z2*z3*z6^2*z8*z9 -
  50*z1^3*z4*z6^2*z8*z9 + 100*z1^2*z2*z4*z6^2*z8*z9 + 100*z1^2*z3*z4*z6^2*z8*z9 - 144*z5*z10
g2 = 36 + 30*z1*z2^3 - 18*z2^4 - 60*z1*z2^2*z3 + 30*z2^3*z3 - 60*z1*z2^2*z4 + 30*z2^3*z4 - 60*z2^2*z3*z4 +
  30*z6*z7^3 + 25*z1*z2^3*z6*z7^3 - 15*z2^4*z6*z7^3 - 50*z1*z2^2*z3*z6*z7^3 + 25*z2^3*z3*z6*z7^3 -
  50*z1*z2^2*z4*z6*z7^3 + 25*z2^3*z4*z6*z7^3 - 50*z2^2*z3*z4*z6*z7^3 - 18*z7^4 - 15*z1*z2^3*z7^4 + 9*z2^4*z7^4 +
  30*z1*z2^2*z3*z7^4 - 15*z2^3*z3*z7^4 + 30*z1*z2^2*z4*z7^4 - 15*z2^3*z4*z7^4 + 30*z2^2*z3*z4*z7^4 -
  60*z6*z7^2*z8 - 50*z1*z2^3*z6*z7^2*z8 + 30*z2^4*z6*z7^2*z8 + 100*z1*z2^2*z3*z6*z7^2*z8 -
  50*z2^3*z3*z6*z7^2*z8 + 100*z1*z2^2*z4*z6*z7^2*z8 - 50*z2^3*z4*z6*z7^2*z8 + 100*z2^2*z3*z4*z6*z7^2*z8 +
  30*z7^3*z8 + 25*z1*z2^3*z7^3*z8 - 15*z2^4*z7^3*z8 - 50*z1*z2^2*z3*z7^3*z8 + 25*z2^3*z3*z7^3*z8 -
  50*z1*z2^2*z4*z7^3*z8 + 25*z2^3*z4*z7^3*z8 - 50*z2^2*z3*z4*z7^3*z8 - 60*z6*z7^2*z9 - 50*z1*z2^3*z6*z7^2*z9 +
  30*z2^4*z6*z7^2*z9 + 100*z1*z2^2*z3*z6*z7^2*z9 - 50*z2^3*z3*z6*z7^2*z9 + 100*z1*z2^2*z4*z6*z7^2*z9 -
  50*z2^3*z4*z6*z7^2*z9 + 100*z2^2*z3*z4*z6*z7^2*z9 + 30*z7^3*z9 + 25*z1*z2^3*z7^3*z9 - 15*z2^4*z7^3*z9 -
  50*z1*z2^2*z3*z7^3*z9 + 25*z2^3*z3*z7^3*z9 - 50*z1*z2^2*z4*z7^3*z9 + 25*z2^3*z4*z7^3*z9 -
  50*z2^2*z3*z4*z7^3*z9 - 60*z7^2*z8*z9 - 50*z1*z2^3*z7^2*z8*z9 + 30*z2^4*z7^2*z8*z9 +
  100*z1*z2^2*z3*z7^2*z8*z9 - 50*z2^3*z3*z7^2*z8*z9 + 100*z1*z2^2*z4*z7^2*z8*z9 - 50*z2^3*z4*z7^2*z8*z9 +
  100*z2^2*z3*z4*z7^2*z8*z9 - 144*z5*z10
g3 = 36 - 60*z1*z2*z3^2 + 30*z1*z3^3 + 30*z2*z3^3 - 18*z3^4 - 60*z1*z3^2*z4 - 60*z2*z3^2*z4 + 30*z3^3*z4 -
  60*z6*z7*z8^2 + 100*z1*z2*z3^2*z6*z7*z8^2 - 50*z1*z3^3*z6*z7*z8^2 - 50*z2*z3^3*z6*z7*z8^2 +
  30*z3^4*z6*z7*z8^2 + 100*z1*z3^2*z4*z6*z7*z8^2 + 100*z2*z3^2*z4*z6*z7*z8^2 - 50*z3^3*z4*z6*z7*z8^2 +
  30*z6*z8^3 - 50*z1*z2*z3^2*z6*z8^3 + 25*z1*z3^3*z6*z8^3 + 25*z2*z3^3*z6*z8^3 - 15*z3^4*z6*z8^3 -
  50*z1*z3^2*z4*z6*z8^3 - 50*z2*z3^2*z4*z6*z8^3 + 25*z3^3*z4*z6*z8^3 + 30*z7*z8^3 - 50*z1*z2*z3^2*z7*z8^3 +
  25*z1*z3^3*z7*z8^3 + 25*z2*z3^3*z7*z8^3 - 15*z3^4*z7*z8^3 - 50*z1*z3^2*z4*z7*z8^3 - 50*z2*z3^2*z4*z7*z8^3 +
  25*z3^3*z4*z7*z8^3 - 18*z8^4 + 30*z1*z2*z3^2*z8^4 - 15*z1*z3^3*z8^4 - 15*z2*z3^3*z8^4 + 9*z3^4*z8^4 +
  30*z1*z3^2*z4*z8^4 + 30*z2*z3^2*z4*z8^4 - 15*z3^3*z4*z8^4 - 60*z6*z8^2*z9 + 100*z1*z2*z3^2*z6*z8^2*z9 -
  50*z1*z3^3*z6*z8^2*z9 - 50*z2*z3^3*z6*z8^2*z9 + 30*z3^4*z6*z8^2*z9 + 100*z1*z3^2*z4*z6*z8^2*z9 +
  100*z2*z3^2*z4*z6*z8^2*z9 - 50*z3^3*z4*z6*z8^2*z9 - 60*z7*z8^2*z9 + 100*z1*z2*z3^2*z7*z8^2*z9 -
  50*z1*z3^3*z7*z8^2*z9 - 50*z2*z3^3*z7*z8^2*z9 + 30*z3^4*z7*z8^2*z9 + 100*z1*z3^2*z4*z7*z8^2*z9 +
  100*z2*z3^2*z4*z7*z8^2*z9 - 50*z3^3*z4*z7*z8^2*z9 + 30*z8^3*z9 - 50*z1*z2*z3^2*z8^3*z9 + 25*z1*z3^3*z8^3*z9 +
  25*z2*z3^3*z8^3*z9 - 15*z3^4*z8^3*z9 - 50*z1*z3^2*z4*z8^3*z9 - 50*z2*z3^2*z4*z8^3*z9 + 25*z3^3*z4*z8^3*z9 - 144*z5*z10
g4 = 36 - 60*z1*z2*z4^2 - 60*z1*z3*z4^2 - 60*z2*z3*z4^2 + 30*z1*z4^3 + 30*z2*z4^3 + 30*z3*z4^3 - 18*z4^4 -
  60*z6*z7*z9^2 + 100*z1*z2*z4^2*z6*z7*z9^2 + 100*z1*z3*z4^2*z6*z7*z9^2 + 100*z2*z3*z4^2*z6*z7*z9^2 -
  50*z1*z4^3*z6*z7*z9^2 - 50*z2*z4^3*z6*z7*z9^2 - 50*z3*z4^3*z6*z7*z9^2 + 30*z4^4*z6*z7*z9^2 - 60*z6*z8*z9^2 +
  100*z1*z2*z4^2*z6*z8*z9^2 + 100*z1*z3*z4^2*z6*z8*z9^2 + 100*z2*z3*z4^2*z6*z8*z9^2 - 50*z1*z4^3*z6*z8*z9^2 -
  50*z2*z4^3*z6*z8*z9^2 - 50*z3*z4^3*z6*z8*z9^2 + 30*z4^4*z6*z8*z9^2 - 60*z7*z8*z9^2 +
  100*z1*z2*z4^2*z7*z8*z9^2 + 100*z1*z3*z4^2*z7*z8*z9^2 + 100*z2*z3*z4^2*z7*z8*z9^2 - 50*z1*z4^3*z7*z8*z9^2 -
  50*z2*z4^3*z7*z8*z9^2 - 50*z3*z4^3*z7*z8*z9^2 + 30*z4^4*z7*z8*z9^2 + 30*z6*z9^3 - 50*z1*z2*z4^2*z6*z9^3 -
  50*z1*z3*z4^2*z6*z9^3 - 50*z2*z3*z4^2*z6*z9^3 + 25*z1*z4^3*z6*z9^3 + 25*z2*z4^3*z6*z9^3 + 25*z3*z4^3*z6*z9^3 -
  15*z4^4*z6*z9^3 + 30*z7*z9^3 - 50*z1*z2*z4^2*z7*z9^3 - 50*z1*z3*z4^2*z7*z9^3 - 50*z2*z3*z4^2*z7*z9^3 +
  25*z1*z4^3*z7*z9^3 + 25*z2*z4^3*z7*z9^3 + 25*z3*z4^3*z7*z9^3 - 15*z4^4*z7*z9^3 + 30*z8*z9^3 -
  50*z1*z2*z4^2*z8*z9^3 - 50*z1*z3*z4^2*z8*z9^3 - 50*z2*z3*z4^2*z8*z9^3 + 25*z1*z4^3*z8*z9^3 +
  25*z2*z4^3*z8*z9^3 + 25*z3*z4^3*z8*z9^3 - 15*z4^4*z8*z9^3 - 18*z9^4 + 30*z1*z2*z4^2*z9^4 + 30*z1*z3*z4^2*z9^4 +
  30*z2*z3*z4^2*z9^4 - 15*z1*z4^3*z9^4 - 15*z2*z4^3*z9^4 - 15*z3*z4^3*z9^4 + 9*z4^4*z9^4 - 144*z5*z10
h1 = z1*z6 + z2*z7 + z3*z8 + z4*z9 - n*(1/(n+1))^(2/n)
h2 = 5*z1*z2*z3*z4 + 5*z6*z7*z8*z9 - 2
h3 = 25*z1*z2*z3*z4*z6*z7*z8*z9 - 1
cpop = [f; g1; g2; g3; g4; h1; h2; h3]

@time begin
opt,sol,data = cs_tssos_first(cpop, z, n+1, 4, numeq=3, CS=false, TS="block", QUIET=true, normality=3, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true)  
end
println(sqrt(-opt))

n = 5
@polyvar z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12
z = tuple(z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,z11,z12)
f = - z6*z12
g1 = 900 + 360*z1^5 - 540*z1^4*z2 - 540*z1^4*z3 + 900*z1^3*z2*z3 - 540*z1^4*z4 + 900*z1^3*z2*z4 + 900*z1^3*z3*z4 -
  1800*z1^2*z2*z3*z4 - 540*z1^4*z5 + 900*z1^3*z2*z5 + 900*z1^3*z3*z5 - 1800*z1^2*z2*z3*z5 + 900*z1^3*z4*z5 -
  1800*z1^2*z2*z4*z5 - 1800*z1^2*z3*z4*z5 + 900*z10*z11*z7^3 + 360*z1^5*z10*z11*z7^3 - 540*z1^4*z10*z11*z2*z7^3 -
  540*z1^4*z10*z11*z3*z7^3 + 900*z1^3*z10*z11*z2*z3*z7^3 - 540*z1^4*z10*z11*z4*z7^3 +
  900*z1^3*z10*z11*z2*z4*z7^3 + 900*z1^3*z10*z11*z3*z4*z7^3 - 1800*z1^2*z10*z11*z2*z3*z4*z7^3 -
  540*z1^4*z10*z11*z5*z7^3 + 900*z1^3*z10*z11*z2*z5*z7^3 + 900*z1^3*z10*z11*z3*z5*z7^3 -
  1800*z1^2*z10*z11*z2*z3*z5*z7^3 + 900*z1^3*z10*z11*z4*z5*z7^3 - 1800*z1^2*z10*z11*z2*z4*z5*z7^3 -
  1800*z1^2*z10*z11*z3*z4*z5*z7^3 - 540*z10*z7^4 - 216*z1^5*z10*z7^4 - 540*z11*z7^4 - 216*z1^5*z11*z7^4 +
  324*z1^4*z10*z2*z7^4 + 324*z1^4*z11*z2*z7^4 + 324*z1^4*z10*z3*z7^4 + 324*z1^4*z11*z3*z7^4 -
  540*z1^3*z10*z2*z3*z7^4 - 540*z1^3*z11*z2*z3*z7^4 + 324*z1^4*z10*z4*z7^4 + 324*z1^4*z11*z4*z7^4 -
  540*z1^3*z10*z2*z4*z7^4 - 540*z1^3*z11*z2*z4*z7^4 - 540*z1^3*z10*z3*z4*z7^4 - 540*z1^3*z11*z3*z4*z7^4 +
  1080*z1^2*z10*z2*z3*z4*z7^4 + 1080*z1^2*z11*z2*z3*z4*z7^4 + 324*z1^4*z10*z5*z7^4 + 324*z1^4*z11*z5*z7^4 -
  540*z1^3*z10*z2*z5*z7^4 - 540*z1^3*z11*z2*z5*z7^4 - 540*z1^3*z10*z3*z5*z7^4 - 540*z1^3*z11*z3*z5*z7^4 +
  1080*z1^2*z10*z2*z3*z5*z7^4 + 1080*z1^2*z11*z2*z3*z5*z7^4 - 540*z1^3*z10*z4*z5*z7^4 - 540*z1^3*z11*z4*z5*z7^4 +
  1080*z1^2*z10*z2*z4*z5*z7^4 + 1080*z1^2*z11*z2*z4*z5*z7^4 + 1080*z1^2*z10*z3*z4*z5*z7^4 +
  1080*z1^2*z11*z3*z4*z5*z7^4 + 360*z7^5 + 144*z1^5*z7^5 - 216*z1^4*z2*z7^5 - 216*z1^4*z3*z7^5 +
  360*z1^3*z2*z3*z7^5 - 216*z1^4*z4*z7^5 + 360*z1^3*z2*z4*z7^5 + 360*z1^3*z3*z4*z7^5 - 720*z1^2*z2*z3*z4*z7^5 -
  216*z1^4*z5*z7^5 + 360*z1^3*z2*z5*z7^5 + 360*z1^3*z3*z5*z7^5 - 720*z1^2*z2*z3*z5*z7^5 + 360*z1^3*z4*z5*z7^5 -
  720*z1^2*z2*z4*z5*z7^5 - 720*z1^2*z3*z4*z5*z7^5 - 1800*z10*z11*z7^2*z8 - 720*z1^5*z10*z11*z7^2*z8 +
  1080*z1^4*z10*z11*z2*z7^2*z8 + 1080*z1^4*z10*z11*z3*z7^2*z8 - 1800*z1^3*z10*z11*z2*z3*z7^2*z8 +
  1080*z1^4*z10*z11*z4*z7^2*z8 - 1800*z1^3*z10*z11*z2*z4*z7^2*z8 - 1800*z1^3*z10*z11*z3*z4*z7^2*z8 +
  3600*z1^2*z10*z11*z2*z3*z4*z7^2*z8 + 1080*z1^4*z10*z11*z5*z7^2*z8 - 1800*z1^3*z10*z11*z2*z5*z7^2*z8 -
  1800*z1^3*z10*z11*z3*z5*z7^2*z8 + 3600*z1^2*z10*z11*z2*z3*z5*z7^2*z8 - 1800*z1^3*z10*z11*z4*z5*z7^2*z8 +
  3600*z1^2*z10*z11*z2*z4*z5*z7^2*z8 + 3600*z1^2*z10*z11*z3*z4*z5*z7^2*z8 + 900*z10*z7^3*z8 +
  360*z1^5*z10*z7^3*z8 + 900*z11*z7^3*z8 + 360*z1^5*z11*z7^3*z8 - 540*z1^4*z10*z2*z7^3*z8 -
  540*z1^4*z11*z2*z7^3*z8 - 540*z1^4*z10*z3*z7^3*z8 - 540*z1^4*z11*z3*z7^3*z8 + 900*z1^3*z10*z2*z3*z7^3*z8 +
  900*z1^3*z11*z2*z3*z7^3*z8 - 540*z1^4*z10*z4*z7^3*z8 - 540*z1^4*z11*z4*z7^3*z8 + 900*z1^3*z10*z2*z4*z7^3*z8 +
  900*z1^3*z11*z2*z4*z7^3*z8 + 900*z1^3*z10*z3*z4*z7^3*z8 + 900*z1^3*z11*z3*z4*z7^3*z8 -
  1800*z1^2*z10*z2*z3*z4*z7^3*z8 - 1800*z1^2*z11*z2*z3*z4*z7^3*z8 - 540*z1^4*z10*z5*z7^3*z8 -
  540*z1^4*z11*z5*z7^3*z8 + 900*z1^3*z10*z2*z5*z7^3*z8 + 900*z1^3*z11*z2*z5*z7^3*z8 +
  900*z1^3*z10*z3*z5*z7^3*z8 + 900*z1^3*z11*z3*z5*z7^3*z8 - 1800*z1^2*z10*z2*z3*z5*z7^3*z8 -
  1800*z1^2*z11*z2*z3*z5*z7^3*z8 + 900*z1^3*z10*z4*z5*z7^3*z8 + 900*z1^3*z11*z4*z5*z7^3*z8 -
  1800*z1^2*z10*z2*z4*z5*z7^3*z8 - 1800*z1^2*z11*z2*z4*z5*z7^3*z8 - 1800*z1^2*z10*z3*z4*z5*z7^3*z8 -
  1800*z1^2*z11*z3*z4*z5*z7^3*z8 - 540*z7^4*z8 - 216*z1^5*z7^4*z8 + 324*z1^4*z2*z7^4*z8 + 324*z1^4*z3*z7^4*z8 -
  540*z1^3*z2*z3*z7^4*z8 + 324*z1^4*z4*z7^4*z8 - 540*z1^3*z2*z4*z7^4*z8 - 540*z1^3*z3*z4*z7^4*z8 +
  1080*z1^2*z2*z3*z4*z7^4*z8 + 324*z1^4*z5*z7^4*z8 - 540*z1^3*z2*z5*z7^4*z8 - 540*z1^3*z3*z5*z7^4*z8 +
  1080*z1^2*z2*z3*z5*z7^4*z8 - 540*z1^3*z4*z5*z7^4*z8 + 1080*z1^2*z2*z4*z5*z7^4*z8 + 1080*z1^2*z3*z4*z5*z7^4*z8 -
  1800*z10*z11*z7^2*z9 - 720*z1^5*z10*z11*z7^2*z9 + 1080*z1^4*z10*z11*z2*z7^2*z9 + 1080*z1^4*z10*z11*z3*z7^2*z9 -
  1800*z1^3*z10*z11*z2*z3*z7^2*z9 + 1080*z1^4*z10*z11*z4*z7^2*z9 - 1800*z1^3*z10*z11*z2*z4*z7^2*z9 -
  1800*z1^3*z10*z11*z3*z4*z7^2*z9 + 3600*z1^2*z10*z11*z2*z3*z4*z7^2*z9 + 1080*z1^4*z10*z11*z5*z7^2*z9 -
  1800*z1^3*z10*z11*z2*z5*z7^2*z9 - 1800*z1^3*z10*z11*z3*z5*z7^2*z9 + 3600*z1^2*z10*z11*z2*z3*z5*z7^2*z9 -
  1800*z1^3*z10*z11*z4*z5*z7^2*z9 + 3600*z1^2*z10*z11*z2*z4*z5*z7^2*z9 + 3600*z1^2*z10*z11*z3*z4*z5*z7^2*z9 +
  900*z10*z7^3*z9 + 360*z1^5*z10*z7^3*z9 + 900*z11*z7^3*z9 + 360*z1^5*z11*z7^3*z9 - 540*z1^4*z10*z2*z7^3*z9 -
  540*z1^4*z11*z2*z7^3*z9 - 540*z1^4*z10*z3*z7^3*z9 - 540*z1^4*z11*z3*z7^3*z9 + 900*z1^3*z10*z2*z3*z7^3*z9 +
  900*z1^3*z11*z2*z3*z7^3*z9 - 540*z1^4*z10*z4*z7^3*z9 - 540*z1^4*z11*z4*z7^3*z9 + 900*z1^3*z10*z2*z4*z7^3*z9 +
  900*z1^3*z11*z2*z4*z7^3*z9 + 900*z1^3*z10*z3*z4*z7^3*z9 + 900*z1^3*z11*z3*z4*z7^3*z9 -
  1800*z1^2*z10*z2*z3*z4*z7^3*z9 - 1800*z1^2*z11*z2*z3*z4*z7^3*z9 - 540*z1^4*z10*z5*z7^3*z9 -
  540*z1^4*z11*z5*z7^3*z9 + 900*z1^3*z10*z2*z5*z7^3*z9 + 900*z1^3*z11*z2*z5*z7^3*z9 +
  900*z1^3*z10*z3*z5*z7^3*z9 + 900*z1^3*z11*z3*z5*z7^3*z9 - 1800*z1^2*z10*z2*z3*z5*z7^3*z9 -
  1800*z1^2*z11*z2*z3*z5*z7^3*z9 + 900*z1^3*z10*z4*z5*z7^3*z9 + 900*z1^3*z11*z4*z5*z7^3*z9 -
  1800*z1^2*z10*z2*z4*z5*z7^3*z9 - 1800*z1^2*z11*z2*z4*z5*z7^3*z9 - 1800*z1^2*z10*z3*z4*z5*z7^3*z9 -
  1800*z1^2*z11*z3*z4*z5*z7^3*z9 - 540*z7^4*z9 - 216*z1^5*z7^4*z9 + 324*z1^4*z2*z7^4*z9 + 324*z1^4*z3*z7^4*z9 -
  540*z1^3*z2*z3*z7^4*z9 + 324*z1^4*z4*z7^4*z9 - 540*z1^3*z2*z4*z7^4*z9 - 540*z1^3*z3*z4*z7^4*z9 +
  1080*z1^2*z2*z3*z4*z7^4*z9 + 324*z1^4*z5*z7^4*z9 - 540*z1^3*z2*z5*z7^4*z9 - 540*z1^3*z3*z5*z7^4*z9 +
  1080*z1^2*z2*z3*z5*z7^4*z9 - 540*z1^3*z4*z5*z7^4*z9 + 1080*z1^2*z2*z4*z5*z7^4*z9 + 1080*z1^2*z3*z4*z5*z7^4*z9 -
  1800*z10*z7^2*z8*z9 - 720*z1^5*z10*z7^2*z8*z9 - 1800*z11*z7^2*z8*z9 - 720*z1^5*z11*z7^2*z8*z9 +
  1080*z1^4*z10*z2*z7^2*z8*z9 + 1080*z1^4*z11*z2*z7^2*z8*z9 + 1080*z1^4*z10*z3*z7^2*z8*z9 +
  1080*z1^4*z11*z3*z7^2*z8*z9 - 1800*z1^3*z10*z2*z3*z7^2*z8*z9 - 1800*z1^3*z11*z2*z3*z7^2*z8*z9 +
  1080*z1^4*z10*z4*z7^2*z8*z9 + 1080*z1^4*z11*z4*z7^2*z8*z9 - 1800*z1^3*z10*z2*z4*z7^2*z8*z9 -
  1800*z1^3*z11*z2*z4*z7^2*z8*z9 - 1800*z1^3*z10*z3*z4*z7^2*z8*z9 - 1800*z1^3*z11*z3*z4*z7^2*z8*z9 +
  3600*z1^2*z10*z2*z3*z4*z7^2*z8*z9 + 3600*z1^2*z11*z2*z3*z4*z7^2*z8*z9 + 1080*z1^4*z10*z5*z7^2*z8*z9 +
  1080*z1^4*z11*z5*z7^2*z8*z9 - 1800*z1^3*z10*z2*z5*z7^2*z8*z9 - 1800*z1^3*z11*z2*z5*z7^2*z8*z9 -
  1800*z1^3*z10*z3*z5*z7^2*z8*z9 - 1800*z1^3*z11*z3*z5*z7^2*z8*z9 + 3600*z1^2*z10*z2*z3*z5*z7^2*z8*z9 +
  3600*z1^2*z11*z2*z3*z5*z7^2*z8*z9 - 1800*z1^3*z10*z4*z5*z7^2*z8*z9 - 1800*z1^3*z11*z4*z5*z7^2*z8*z9 +
  3600*z1^2*z10*z2*z4*z5*z7^2*z8*z9 + 3600*z1^2*z11*z2*z4*z5*z7^2*z8*z9 + 3600*z1^2*z10*z3*z4*z5*z7^2*z8*z9 +
  3600*z1^2*z11*z3*z4*z5*z7^2*z8*z9 + 900*z7^3*z8*z9 + 360*z1^5*z7^3*z8*z9 - 540*z1^4*z2*z7^3*z8*z9 -
  540*z1^4*z3*z7^3*z8*z9 + 900*z1^3*z2*z3*z7^3*z8*z9 - 540*z1^4*z4*z7^3*z8*z9 + 900*z1^3*z2*z4*z7^3*z8*z9 +
  900*z1^3*z3*z4*z7^3*z8*z9 - 1800*z1^2*z2*z3*z4*z7^3*z8*z9 - 540*z1^4*z5*z7^3*z8*z9 +
  900*z1^3*z2*z5*z7^3*z8*z9 + 900*z1^3*z3*z5*z7^3*z8*z9 - 1800*z1^2*z2*z3*z5*z7^3*z8*z9 +
  900*z1^3*z4*z5*z7^3*z8*z9 - 1800*z1^2*z2*z4*z5*z7^3*z8*z9 - 1800*z1^2*z3*z4*z5*z7^3*z8*z9 - 3600*z6*z12
g2 = 900 - 540*z1*z2^4 + 360*z2^5 + 900*z1*z2^3*z3 - 540*z2^4*z3 + 900*z1*z2^3*z4 - 540*z2^4*z4 - 1800*z1*z2^2*z3*z4 +
  900*z2^3*z3*z4 + 900*z1*z2^3*z5 - 540*z2^4*z5 - 1800*z1*z2^2*z3*z5 + 900*z2^3*z3*z5 - 1800*z1*z2^2*z4*z5 +
  900*z2^3*z4*z5 - 1800*z2^2*z3*z4*z5 - 1800*z10*z11*z7*z8^2 + 1080*z1*z10*z11*z2^4*z7*z8^2 -
  720*z10*z11*z2^5*z7*z8^2 - 1800*z1*z10*z11*z2^3*z3*z7*z8^2 + 1080*z10*z11*z2^4*z3*z7*z8^2 -
  1800*z1*z10*z11*z2^3*z4*z7*z8^2 + 1080*z10*z11*z2^4*z4*z7*z8^2 + 3600*z1*z10*z11*z2^2*z3*z4*z7*z8^2 -
  1800*z10*z11*z2^3*z3*z4*z7*z8^2 - 1800*z1*z10*z11*z2^3*z5*z7*z8^2 + 1080*z10*z11*z2^4*z5*z7*z8^2 +
  3600*z1*z10*z11*z2^2*z3*z5*z7*z8^2 - 1800*z10*z11*z2^3*z3*z5*z7*z8^2 + 3600*z1*z10*z11*z2^2*z4*z5*z7*z8^2 -
  1800*z10*z11*z2^3*z4*z5*z7*z8^2 + 3600*z10*z11*z2^2*z3*z4*z5*z7*z8^2 + 900*z10*z11*z8^3 -
  540*z1*z10*z11*z2^4*z8^3 + 360*z10*z11*z2^5*z8^3 + 900*z1*z10*z11*z2^3*z3*z8^3 - 540*z10*z11*z2^4*z3*z8^3 +
  900*z1*z10*z11*z2^3*z4*z8^3 - 540*z10*z11*z2^4*z4*z8^3 - 1800*z1*z10*z11*z2^2*z3*z4*z8^3 +
  900*z10*z11*z2^3*z3*z4*z8^3 + 900*z1*z10*z11*z2^3*z5*z8^3 - 540*z10*z11*z2^4*z5*z8^3 -
  1800*z1*z10*z11*z2^2*z3*z5*z8^3 + 900*z10*z11*z2^3*z3*z5*z8^3 - 1800*z1*z10*z11*z2^2*z4*z5*z8^3 +
  900*z10*z11*z2^3*z4*z5*z8^3 - 1800*z10*z11*z2^2*z3*z4*z5*z8^3 + 900*z10*z7*z8^3 + 900*z11*z7*z8^3 -
  540*z1*z10*z2^4*z7*z8^3 - 540*z1*z11*z2^4*z7*z8^3 + 360*z10*z2^5*z7*z8^3 + 360*z11*z2^5*z7*z8^3 +
  900*z1*z10*z2^3*z3*z7*z8^3 + 900*z1*z11*z2^3*z3*z7*z8^3 - 540*z10*z2^4*z3*z7*z8^3 - 540*z11*z2^4*z3*z7*z8^3 +
  900*z1*z10*z2^3*z4*z7*z8^3 + 900*z1*z11*z2^3*z4*z7*z8^3 - 540*z10*z2^4*z4*z7*z8^3 - 540*z11*z2^4*z4*z7*z8^3 -
  1800*z1*z10*z2^2*z3*z4*z7*z8^3 - 1800*z1*z11*z2^2*z3*z4*z7*z8^3 + 900*z10*z2^3*z3*z4*z7*z8^3 +
  900*z11*z2^3*z3*z4*z7*z8^3 + 900*z1*z10*z2^3*z5*z7*z8^3 + 900*z1*z11*z2^3*z5*z7*z8^3 -
  540*z10*z2^4*z5*z7*z8^3 - 540*z11*z2^4*z5*z7*z8^3 - 1800*z1*z10*z2^2*z3*z5*z7*z8^3 -
  1800*z1*z11*z2^2*z3*z5*z7*z8^3 + 900*z10*z2^3*z3*z5*z7*z8^3 + 900*z11*z2^3*z3*z5*z7*z8^3 -
  1800*z1*z10*z2^2*z4*z5*z7*z8^3 - 1800*z1*z11*z2^2*z4*z5*z7*z8^3 + 900*z10*z2^3*z4*z5*z7*z8^3 +
  900*z11*z2^3*z4*z5*z7*z8^3 - 1800*z10*z2^2*z3*z4*z5*z7*z8^3 - 1800*z11*z2^2*z3*z4*z5*z7*z8^3 - 540*z10*z8^4 -
  540*z11*z8^4 + 324*z1*z10*z2^4*z8^4 + 324*z1*z11*z2^4*z8^4 - 216*z10*z2^5*z8^4 - 216*z11*z2^5*z8^4 -
  540*z1*z10*z2^3*z3*z8^4 - 540*z1*z11*z2^3*z3*z8^4 + 324*z10*z2^4*z3*z8^4 + 324*z11*z2^4*z3*z8^4 -
  540*z1*z10*z2^3*z4*z8^4 - 540*z1*z11*z2^3*z4*z8^4 + 324*z10*z2^4*z4*z8^4 + 324*z11*z2^4*z4*z8^4 +
  1080*z1*z10*z2^2*z3*z4*z8^4 + 1080*z1*z11*z2^2*z3*z4*z8^4 - 540*z10*z2^3*z3*z4*z8^4 - 540*z11*z2^3*z3*z4*z8^4 -
  540*z1*z10*z2^3*z5*z8^4 - 540*z1*z11*z2^3*z5*z8^4 + 324*z10*z2^4*z5*z8^4 + 324*z11*z2^4*z5*z8^4 +
  1080*z1*z10*z2^2*z3*z5*z8^4 + 1080*z1*z11*z2^2*z3*z5*z8^4 - 540*z10*z2^3*z3*z5*z8^4 - 540*z11*z2^3*z3*z5*z8^4 +
  1080*z1*z10*z2^2*z4*z5*z8^4 + 1080*z1*z11*z2^2*z4*z5*z8^4 - 540*z10*z2^3*z4*z5*z8^4 - 540*z11*z2^3*z4*z5*z8^4 +
  1080*z10*z2^2*z3*z4*z5*z8^4 + 1080*z11*z2^2*z3*z4*z5*z8^4 - 540*z7*z8^4 + 324*z1*z2^4*z7*z8^4 -
  216*z2^5*z7*z8^4 - 540*z1*z2^3*z3*z7*z8^4 + 324*z2^4*z3*z7*z8^4 - 540*z1*z2^3*z4*z7*z8^4 +
  324*z2^4*z4*z7*z8^4 + 1080*z1*z2^2*z3*z4*z7*z8^4 - 540*z2^3*z3*z4*z7*z8^4 - 540*z1*z2^3*z5*z7*z8^4 +
  324*z2^4*z5*z7*z8^4 + 1080*z1*z2^2*z3*z5*z7*z8^4 - 540*z2^3*z3*z5*z7*z8^4 + 1080*z1*z2^2*z4*z5*z7*z8^4 -
  540*z2^3*z4*z5*z7*z8^4 + 1080*z2^2*z3*z4*z5*z7*z8^4 + 360*z8^5 - 216*z1*z2^4*z8^5 + 144*z2^5*z8^5 +
  360*z1*z2^3*z3*z8^5 - 216*z2^4*z3*z8^5 + 360*z1*z2^3*z4*z8^5 - 216*z2^4*z4*z8^5 - 720*z1*z2^2*z3*z4*z8^5 +
  360*z2^3*z3*z4*z8^5 + 360*z1*z2^3*z5*z8^5 - 216*z2^4*z5*z8^5 - 720*z1*z2^2*z3*z5*z8^5 + 360*z2^3*z3*z5*z8^5 -
  720*z1*z2^2*z4*z5*z8^5 + 360*z2^3*z4*z5*z8^5 - 720*z2^2*z3*z4*z5*z8^5 - 1800*z10*z11*z8^2*z9 +
  1080*z1*z10*z11*z2^4*z8^2*z9 - 720*z10*z11*z2^5*z8^2*z9 - 1800*z1*z10*z11*z2^3*z3*z8^2*z9 +
  1080*z10*z11*z2^4*z3*z8^2*z9 - 1800*z1*z10*z11*z2^3*z4*z8^2*z9 + 1080*z10*z11*z2^4*z4*z8^2*z9 +
  3600*z1*z10*z11*z2^2*z3*z4*z8^2*z9 - 1800*z10*z11*z2^3*z3*z4*z8^2*z9 - 1800*z1*z10*z11*z2^3*z5*z8^2*z9 +
  1080*z10*z11*z2^4*z5*z8^2*z9 + 3600*z1*z10*z11*z2^2*z3*z5*z8^2*z9 - 1800*z10*z11*z2^3*z3*z5*z8^2*z9 +
  3600*z1*z10*z11*z2^2*z4*z5*z8^2*z9 - 1800*z10*z11*z2^3*z4*z5*z8^2*z9 + 3600*z10*z11*z2^2*z3*z4*z5*z8^2*z9 -
  1800*z10*z7*z8^2*z9 - 1800*z11*z7*z8^2*z9 + 1080*z1*z10*z2^4*z7*z8^2*z9 + 1080*z1*z11*z2^4*z7*z8^2*z9 -
  720*z10*z2^5*z7*z8^2*z9 - 720*z11*z2^5*z7*z8^2*z9 - 1800*z1*z10*z2^3*z3*z7*z8^2*z9 -
  1800*z1*z11*z2^3*z3*z7*z8^2*z9 + 1080*z10*z2^4*z3*z7*z8^2*z9 + 1080*z11*z2^4*z3*z7*z8^2*z9 -
  1800*z1*z10*z2^3*z4*z7*z8^2*z9 - 1800*z1*z11*z2^3*z4*z7*z8^2*z9 + 1080*z10*z2^4*z4*z7*z8^2*z9 +
  1080*z11*z2^4*z4*z7*z8^2*z9 + 3600*z1*z10*z2^2*z3*z4*z7*z8^2*z9 + 3600*z1*z11*z2^2*z3*z4*z7*z8^2*z9 -
  1800*z10*z2^3*z3*z4*z7*z8^2*z9 - 1800*z11*z2^3*z3*z4*z7*z8^2*z9 - 1800*z1*z10*z2^3*z5*z7*z8^2*z9 -
  1800*z1*z11*z2^3*z5*z7*z8^2*z9 + 1080*z10*z2^4*z5*z7*z8^2*z9 + 1080*z11*z2^4*z5*z7*z8^2*z9 +
  3600*z1*z10*z2^2*z3*z5*z7*z8^2*z9 + 3600*z1*z11*z2^2*z3*z5*z7*z8^2*z9 - 1800*z10*z2^3*z3*z5*z7*z8^2*z9 -
  1800*z11*z2^3*z3*z5*z7*z8^2*z9 + 3600*z1*z10*z2^2*z4*z5*z7*z8^2*z9 + 3600*z1*z11*z2^2*z4*z5*z7*z8^2*z9 -
  1800*z10*z2^3*z4*z5*z7*z8^2*z9 - 1800*z11*z2^3*z4*z5*z7*z8^2*z9 + 3600*z10*z2^2*z3*z4*z5*z7*z8^2*z9 +
  3600*z11*z2^2*z3*z4*z5*z7*z8^2*z9 + 900*z10*z8^3*z9 + 900*z11*z8^3*z9 - 540*z1*z10*z2^4*z8^3*z9 -
  540*z1*z11*z2^4*z8^3*z9 + 360*z10*z2^5*z8^3*z9 + 360*z11*z2^5*z8^3*z9 + 900*z1*z10*z2^3*z3*z8^3*z9 +
  900*z1*z11*z2^3*z3*z8^3*z9 - 540*z10*z2^4*z3*z8^3*z9 - 540*z11*z2^4*z3*z8^3*z9 + 900*z1*z10*z2^3*z4*z8^3*z9 +
  900*z1*z11*z2^3*z4*z8^3*z9 - 540*z10*z2^4*z4*z8^3*z9 - 540*z11*z2^4*z4*z8^3*z9 -
  1800*z1*z10*z2^2*z3*z4*z8^3*z9 - 1800*z1*z11*z2^2*z3*z4*z8^3*z9 + 900*z10*z2^3*z3*z4*z8^3*z9 +
  900*z11*z2^3*z3*z4*z8^3*z9 + 900*z1*z10*z2^3*z5*z8^3*z9 + 900*z1*z11*z2^3*z5*z8^3*z9 -
  540*z10*z2^4*z5*z8^3*z9 - 540*z11*z2^4*z5*z8^3*z9 - 1800*z1*z10*z2^2*z3*z5*z8^3*z9 -
  1800*z1*z11*z2^2*z3*z5*z8^3*z9 + 900*z10*z2^3*z3*z5*z8^3*z9 + 900*z11*z2^3*z3*z5*z8^3*z9 -
  1800*z1*z10*z2^2*z4*z5*z8^3*z9 - 1800*z1*z11*z2^2*z4*z5*z8^3*z9 + 900*z10*z2^3*z4*z5*z8^3*z9 +
  900*z11*z2^3*z4*z5*z8^3*z9 - 1800*z10*z2^2*z3*z4*z5*z8^3*z9 - 1800*z11*z2^2*z3*z4*z5*z8^3*z9 + 900*z7*z8^3*z9 -
  540*z1*z2^4*z7*z8^3*z9 + 360*z2^5*z7*z8^3*z9 + 900*z1*z2^3*z3*z7*z8^3*z9 - 540*z2^4*z3*z7*z8^3*z9 +
  900*z1*z2^3*z4*z7*z8^3*z9 - 540*z2^4*z4*z7*z8^3*z9 - 1800*z1*z2^2*z3*z4*z7*z8^3*z9 +
  900*z2^3*z3*z4*z7*z8^3*z9 + 900*z1*z2^3*z5*z7*z8^3*z9 - 540*z2^4*z5*z7*z8^3*z9 -
  1800*z1*z2^2*z3*z5*z7*z8^3*z9 + 900*z2^3*z3*z5*z7*z8^3*z9 - 1800*z1*z2^2*z4*z5*z7*z8^3*z9 +
  900*z2^3*z4*z5*z7*z8^3*z9 - 1800*z2^2*z3*z4*z5*z7*z8^3*z9 - 540*z8^4*z9 + 324*z1*z2^4*z8^4*z9 -
  216*z2^5*z8^4*z9 - 540*z1*z2^3*z3*z8^4*z9 + 324*z2^4*z3*z8^4*z9 - 540*z1*z2^3*z4*z8^4*z9 +
  324*z2^4*z4*z8^4*z9 + 1080*z1*z2^2*z3*z4*z8^4*z9 - 540*z2^3*z3*z4*z8^4*z9 - 540*z1*z2^3*z5*z8^4*z9 +
  324*z2^4*z5*z8^4*z9 + 1080*z1*z2^2*z3*z5*z8^4*z9 - 540*z2^3*z3*z5*z8^4*z9 + 1080*z1*z2^2*z4*z5*z8^4*z9 -
  540*z2^3*z4*z5*z8^4*z9 + 1080*z2^2*z3*z4*z5*z8^4*z9 - 3600*z6*z12
g3 = 900 + 900*z1*z2*z3^3 - 540*z1*z3^4 - 540*z2*z3^4 + 360*z3^5 - 1800*z1*z2*z3^2*z4 + 900*z1*z3^3*z4 +
  900*z2*z3^3*z4 - 540*z3^4*z4 - 1800*z1*z2*z3^2*z5 + 900*z1*z3^3*z5 + 900*z2*z3^3*z5 - 540*z3^4*z5 -
  1800*z1*z3^2*z4*z5 - 1800*z2*z3^2*z4*z5 + 900*z3^3*z4*z5 - 1800*z10*z11*z7*z9^2 -
  1800*z1*z10*z11*z2*z3^3*z7*z9^2 + 1080*z1*z10*z11*z3^4*z7*z9^2 + 1080*z10*z11*z2*z3^4*z7*z9^2 -
  720*z10*z11*z3^5*z7*z9^2 + 3600*z1*z10*z11*z2*z3^2*z4*z7*z9^2 - 1800*z1*z10*z11*z3^3*z4*z7*z9^2 -
  1800*z10*z11*z2*z3^3*z4*z7*z9^2 + 1080*z10*z11*z3^4*z4*z7*z9^2 + 3600*z1*z10*z11*z2*z3^2*z5*z7*z9^2 -
  1800*z1*z10*z11*z3^3*z5*z7*z9^2 - 1800*z10*z11*z2*z3^3*z5*z7*z9^2 + 1080*z10*z11*z3^4*z5*z7*z9^2 +
  3600*z1*z10*z11*z3^2*z4*z5*z7*z9^2 + 3600*z10*z11*z2*z3^2*z4*z5*z7*z9^2 - 1800*z10*z11*z3^3*z4*z5*z7*z9^2 -
  1800*z10*z11*z8*z9^2 - 1800*z1*z10*z11*z2*z3^3*z8*z9^2 + 1080*z1*z10*z11*z3^4*z8*z9^2 +
  1080*z10*z11*z2*z3^4*z8*z9^2 - 720*z10*z11*z3^5*z8*z9^2 + 3600*z1*z10*z11*z2*z3^2*z4*z8*z9^2 -
  1800*z1*z10*z11*z3^3*z4*z8*z9^2 - 1800*z10*z11*z2*z3^3*z4*z8*z9^2 + 1080*z10*z11*z3^4*z4*z8*z9^2 +
  3600*z1*z10*z11*z2*z3^2*z5*z8*z9^2 - 1800*z1*z10*z11*z3^3*z5*z8*z9^2 - 1800*z10*z11*z2*z3^3*z5*z8*z9^2 +
  1080*z10*z11*z3^4*z5*z8*z9^2 + 3600*z1*z10*z11*z3^2*z4*z5*z8*z9^2 + 3600*z10*z11*z2*z3^2*z4*z5*z8*z9^2 -
  1800*z10*z11*z3^3*z4*z5*z8*z9^2 - 1800*z10*z7*z8*z9^2 - 1800*z11*z7*z8*z9^2 - 1800*z1*z10*z2*z3^3*z7*z8*z9^2 -
  1800*z1*z11*z2*z3^3*z7*z8*z9^2 + 1080*z1*z10*z3^4*z7*z8*z9^2 + 1080*z1*z11*z3^4*z7*z8*z9^2 +
  1080*z10*z2*z3^4*z7*z8*z9^2 + 1080*z11*z2*z3^4*z7*z8*z9^2 - 720*z10*z3^5*z7*z8*z9^2 - 720*z11*z3^5*z7*z8*z9^2 +
  3600*z1*z10*z2*z3^2*z4*z7*z8*z9^2 + 3600*z1*z11*z2*z3^2*z4*z7*z8*z9^2 - 1800*z1*z10*z3^3*z4*z7*z8*z9^2 -
  1800*z1*z11*z3^3*z4*z7*z8*z9^2 - 1800*z10*z2*z3^3*z4*z7*z8*z9^2 - 1800*z11*z2*z3^3*z4*z7*z8*z9^2 +
  1080*z10*z3^4*z4*z7*z8*z9^2 + 1080*z11*z3^4*z4*z7*z8*z9^2 + 3600*z1*z10*z2*z3^2*z5*z7*z8*z9^2 +
  3600*z1*z11*z2*z3^2*z5*z7*z8*z9^2 - 1800*z1*z10*z3^3*z5*z7*z8*z9^2 - 1800*z1*z11*z3^3*z5*z7*z8*z9^2 -
  1800*z10*z2*z3^3*z5*z7*z8*z9^2 - 1800*z11*z2*z3^3*z5*z7*z8*z9^2 + 1080*z10*z3^4*z5*z7*z8*z9^2 +
  1080*z11*z3^4*z5*z7*z8*z9^2 + 3600*z1*z10*z3^2*z4*z5*z7*z8*z9^2 + 3600*z1*z11*z3^2*z4*z5*z7*z8*z9^2 +
  3600*z10*z2*z3^2*z4*z5*z7*z8*z9^2 + 3600*z11*z2*z3^2*z4*z5*z7*z8*z9^2 - 1800*z10*z3^3*z4*z5*z7*z8*z9^2 -
  1800*z11*z3^3*z4*z5*z7*z8*z9^2 + 900*z10*z11*z9^3 + 900*z1*z10*z11*z2*z3^3*z9^3 - 540*z1*z10*z11*z3^4*z9^3 -
  540*z10*z11*z2*z3^4*z9^3 + 360*z10*z11*z3^5*z9^3 - 1800*z1*z10*z11*z2*z3^2*z4*z9^3 +
  900*z1*z10*z11*z3^3*z4*z9^3 + 900*z10*z11*z2*z3^3*z4*z9^3 - 540*z10*z11*z3^4*z4*z9^3 -
  1800*z1*z10*z11*z2*z3^2*z5*z9^3 + 900*z1*z10*z11*z3^3*z5*z9^3 + 900*z10*z11*z2*z3^3*z5*z9^3 -
  540*z10*z11*z3^4*z5*z9^3 - 1800*z1*z10*z11*z3^2*z4*z5*z9^3 - 1800*z10*z11*z2*z3^2*z4*z5*z9^3 +
  900*z10*z11*z3^3*z4*z5*z9^3 + 900*z10*z7*z9^3 + 900*z11*z7*z9^3 + 900*z1*z10*z2*z3^3*z7*z9^3 +
  900*z1*z11*z2*z3^3*z7*z9^3 - 540*z1*z10*z3^4*z7*z9^3 - 540*z1*z11*z3^4*z7*z9^3 - 540*z10*z2*z3^4*z7*z9^3 -
  540*z11*z2*z3^4*z7*z9^3 + 360*z10*z3^5*z7*z9^3 + 360*z11*z3^5*z7*z9^3 - 1800*z1*z10*z2*z3^2*z4*z7*z9^3 -
  1800*z1*z11*z2*z3^2*z4*z7*z9^3 + 900*z1*z10*z3^3*z4*z7*z9^3 + 900*z1*z11*z3^3*z4*z7*z9^3 +
  900*z10*z2*z3^3*z4*z7*z9^3 + 900*z11*z2*z3^3*z4*z7*z9^3 - 540*z10*z3^4*z4*z7*z9^3 - 540*z11*z3^4*z4*z7*z9^3 -
  1800*z1*z10*z2*z3^2*z5*z7*z9^3 - 1800*z1*z11*z2*z3^2*z5*z7*z9^3 + 900*z1*z10*z3^3*z5*z7*z9^3 +
  900*z1*z11*z3^3*z5*z7*z9^3 + 900*z10*z2*z3^3*z5*z7*z9^3 + 900*z11*z2*z3^3*z5*z7*z9^3 -
  540*z10*z3^4*z5*z7*z9^3 - 540*z11*z3^4*z5*z7*z9^3 - 1800*z1*z10*z3^2*z4*z5*z7*z9^3 -
  1800*z1*z11*z3^2*z4*z5*z7*z9^3 - 1800*z10*z2*z3^2*z4*z5*z7*z9^3 - 1800*z11*z2*z3^2*z4*z5*z7*z9^3 +
  900*z10*z3^3*z4*z5*z7*z9^3 + 900*z11*z3^3*z4*z5*z7*z9^3 + 900*z10*z8*z9^3 + 900*z11*z8*z9^3 +
  900*z1*z10*z2*z3^3*z8*z9^3 + 900*z1*z11*z2*z3^3*z8*z9^3 - 540*z1*z10*z3^4*z8*z9^3 - 540*z1*z11*z3^4*z8*z9^3 -
  540*z10*z2*z3^4*z8*z9^3 - 540*z11*z2*z3^4*z8*z9^3 + 360*z10*z3^5*z8*z9^3 + 360*z11*z3^5*z8*z9^3 -
  1800*z1*z10*z2*z3^2*z4*z8*z9^3 - 1800*z1*z11*z2*z3^2*z4*z8*z9^3 + 900*z1*z10*z3^3*z4*z8*z9^3 +
  900*z1*z11*z3^3*z4*z8*z9^3 + 900*z10*z2*z3^3*z4*z8*z9^3 + 900*z11*z2*z3^3*z4*z8*z9^3 -
  540*z10*z3^4*z4*z8*z9^3 - 540*z11*z3^4*z4*z8*z9^3 - 1800*z1*z10*z2*z3^2*z5*z8*z9^3 -
  1800*z1*z11*z2*z3^2*z5*z8*z9^3 + 900*z1*z10*z3^3*z5*z8*z9^3 + 900*z1*z11*z3^3*z5*z8*z9^3 +
  900*z10*z2*z3^3*z5*z8*z9^3 + 900*z11*z2*z3^3*z5*z8*z9^3 - 540*z10*z3^4*z5*z8*z9^3 - 540*z11*z3^4*z5*z8*z9^3 -
  1800*z1*z10*z3^2*z4*z5*z8*z9^3 - 1800*z1*z11*z3^2*z4*z5*z8*z9^3 - 1800*z10*z2*z3^2*z4*z5*z8*z9^3 -
  1800*z11*z2*z3^2*z4*z5*z8*z9^3 + 900*z10*z3^3*z4*z5*z8*z9^3 + 900*z11*z3^3*z4*z5*z8*z9^3 + 900*z7*z8*z9^3 +
  900*z1*z2*z3^3*z7*z8*z9^3 - 540*z1*z3^4*z7*z8*z9^3 - 540*z2*z3^4*z7*z8*z9^3 + 360*z3^5*z7*z8*z9^3 -
  1800*z1*z2*z3^2*z4*z7*z8*z9^3 + 900*z1*z3^3*z4*z7*z8*z9^3 + 900*z2*z3^3*z4*z7*z8*z9^3 -
  540*z3^4*z4*z7*z8*z9^3 - 1800*z1*z2*z3^2*z5*z7*z8*z9^3 + 900*z1*z3^3*z5*z7*z8*z9^3 +
  900*z2*z3^3*z5*z7*z8*z9^3 - 540*z3^4*z5*z7*z8*z9^3 - 1800*z1*z3^2*z4*z5*z7*z8*z9^3 -
  1800*z2*z3^2*z4*z5*z7*z8*z9^3 + 900*z3^3*z4*z5*z7*z8*z9^3 - 540*z10*z9^4 - 540*z11*z9^4 -
  540*z1*z10*z2*z3^3*z9^4 - 540*z1*z11*z2*z3^3*z9^4 + 324*z1*z10*z3^4*z9^4 + 324*z1*z11*z3^4*z9^4 +
  324*z10*z2*z3^4*z9^4 + 324*z11*z2*z3^4*z9^4 - 216*z10*z3^5*z9^4 - 216*z11*z3^5*z9^4 +
  1080*z1*z10*z2*z3^2*z4*z9^4 + 1080*z1*z11*z2*z3^2*z4*z9^4 - 540*z1*z10*z3^3*z4*z9^4 - 540*z1*z11*z3^3*z4*z9^4 -
  540*z10*z2*z3^3*z4*z9^4 - 540*z11*z2*z3^3*z4*z9^4 + 324*z10*z3^4*z4*z9^4 + 324*z11*z3^4*z4*z9^4 +
  1080*z1*z10*z2*z3^2*z5*z9^4 + 1080*z1*z11*z2*z3^2*z5*z9^4 - 540*z1*z10*z3^3*z5*z9^4 - 540*z1*z11*z3^3*z5*z9^4 -
  540*z10*z2*z3^3*z5*z9^4 - 540*z11*z2*z3^3*z5*z9^4 + 324*z10*z3^4*z5*z9^4 + 324*z11*z3^4*z5*z9^4 +
  1080*z1*z10*z3^2*z4*z5*z9^4 + 1080*z1*z11*z3^2*z4*z5*z9^4 + 1080*z10*z2*z3^2*z4*z5*z9^4 +
  1080*z11*z2*z3^2*z4*z5*z9^4 - 540*z10*z3^3*z4*z5*z9^4 - 540*z11*z3^3*z4*z5*z9^4 - 540*z7*z9^4 -
  540*z1*z2*z3^3*z7*z9^4 + 324*z1*z3^4*z7*z9^4 + 324*z2*z3^4*z7*z9^4 - 216*z3^5*z7*z9^4 +
  1080*z1*z2*z3^2*z4*z7*z9^4 - 540*z1*z3^3*z4*z7*z9^4 - 540*z2*z3^3*z4*z7*z9^4 + 324*z3^4*z4*z7*z9^4 +
  1080*z1*z2*z3^2*z5*z7*z9^4 - 540*z1*z3^3*z5*z7*z9^4 - 540*z2*z3^3*z5*z7*z9^4 + 324*z3^4*z5*z7*z9^4 +
  1080*z1*z3^2*z4*z5*z7*z9^4 + 1080*z2*z3^2*z4*z5*z7*z9^4 - 540*z3^3*z4*z5*z7*z9^4 - 540*z8*z9^4 -
  540*z1*z2*z3^3*z8*z9^4 + 324*z1*z3^4*z8*z9^4 + 324*z2*z3^4*z8*z9^4 - 216*z3^5*z8*z9^4 +
  1080*z1*z2*z3^2*z4*z8*z9^4 - 540*z1*z3^3*z4*z8*z9^4 - 540*z2*z3^3*z4*z8*z9^4 + 324*z3^4*z4*z8*z9^4 +
  1080*z1*z2*z3^2*z5*z8*z9^4 - 540*z1*z3^3*z5*z8*z9^4 - 540*z2*z3^3*z5*z8*z9^4 + 324*z3^4*z5*z8*z9^4 +
  1080*z1*z3^2*z4*z5*z8*z9^4 + 1080*z2*z3^2*z4*z5*z8*z9^4 - 540*z3^3*z4*z5*z8*z9^4 + 360*z9^5 +
  360*z1*z2*z3^3*z9^5 - 216*z1*z3^4*z9^5 - 216*z2*z3^4*z9^5 + 144*z3^5*z9^5 - 720*z1*z2*z3^2*z4*z9^5 +
  360*z1*z3^3*z4*z9^5 + 360*z2*z3^3*z4*z9^5 - 216*z3^4*z4*z9^5 - 720*z1*z2*z3^2*z5*z9^5 + 360*z1*z3^3*z5*z9^5 +
  360*z2*z3^3*z5*z9^5 - 216*z3^4*z5*z9^5 - 720*z1*z3^2*z4*z5*z9^5 - 720*z2*z3^2*z4*z5*z9^5 + 360*z3^3*z4*z5*z9^5 - 3600*z6*z12
g4 = 900 + 360*z10^5 - 540*z10^4*z11 - 1800*z1*z2*z3*z4^2 - 720*z1*z10^5*z2*z3*z4^2 + 1080*z1*z10^4*z11*z2*z3*z4^2 +
  900*z1*z2*z4^3 + 360*z1*z10^5*z2*z4^3 - 540*z1*z10^4*z11*z2*z4^3 + 900*z1*z3*z4^3 + 360*z1*z10^5*z3*z4^3 -
  540*z1*z10^4*z11*z3*z4^3 + 900*z2*z3*z4^3 + 360*z10^5*z2*z3*z4^3 - 540*z10^4*z11*z2*z3*z4^3 - 540*z1*z4^4 -
  216*z1*z10^5*z4^4 + 324*z1*z10^4*z11*z4^4 - 540*z2*z4^4 - 216*z10^5*z2*z4^4 + 324*z10^4*z11*z2*z4^4 -
  540*z3*z4^4 - 216*z10^5*z3*z4^4 + 324*z10^4*z11*z3*z4^4 + 360*z4^5 + 144*z10^5*z4^5 - 216*z10^4*z11*z4^5 -
  1800*z1*z2*z4^2*z5 - 720*z1*z10^5*z2*z4^2*z5 + 1080*z1*z10^4*z11*z2*z4^2*z5 - 1800*z1*z3*z4^2*z5 -
  720*z1*z10^5*z3*z4^2*z5 + 1080*z1*z10^4*z11*z3*z4^2*z5 - 1800*z2*z3*z4^2*z5 - 720*z10^5*z2*z3*z4^2*z5 +
  1080*z10^4*z11*z2*z3*z4^2*z5 + 900*z1*z4^3*z5 + 360*z1*z10^5*z4^3*z5 - 540*z1*z10^4*z11*z4^3*z5 +
  900*z2*z4^3*z5 + 360*z10^5*z2*z4^3*z5 - 540*z10^4*z11*z2*z4^3*z5 + 900*z3*z4^3*z5 + 360*z10^5*z3*z4^3*z5 -
  540*z10^4*z11*z3*z4^3*z5 - 540*z4^4*z5 - 216*z10^5*z4^4*z5 + 324*z10^4*z11*z4^4*z5 - 540*z10^4*z7 +
  900*z10^3*z11*z7 + 1080*z1*z10^4*z2*z3*z4^2*z7 - 1800*z1*z10^3*z11*z2*z3*z4^2*z7 - 540*z1*z10^4*z2*z4^3*z7 +
  900*z1*z10^3*z11*z2*z4^3*z7 - 540*z1*z10^4*z3*z4^3*z7 + 900*z1*z10^3*z11*z3*z4^3*z7 - 540*z10^4*z2*z3*z4^3*z7 +
  900*z10^3*z11*z2*z3*z4^3*z7 + 324*z1*z10^4*z4^4*z7 - 540*z1*z10^3*z11*z4^4*z7 + 324*z10^4*z2*z4^4*z7 -
  540*z10^3*z11*z2*z4^4*z7 + 324*z10^4*z3*z4^4*z7 - 540*z10^3*z11*z3*z4^4*z7 - 216*z10^4*z4^5*z7 +
  360*z10^3*z11*z4^5*z7 + 1080*z1*z10^4*z2*z4^2*z5*z7 - 1800*z1*z10^3*z11*z2*z4^2*z5*z7 +
  1080*z1*z10^4*z3*z4^2*z5*z7 - 1800*z1*z10^3*z11*z3*z4^2*z5*z7 + 1080*z10^4*z2*z3*z4^2*z5*z7 -
  1800*z10^3*z11*z2*z3*z4^2*z5*z7 - 540*z1*z10^4*z4^3*z5*z7 + 900*z1*z10^3*z11*z4^3*z5*z7 -
  540*z10^4*z2*z4^3*z5*z7 + 900*z10^3*z11*z2*z4^3*z5*z7 - 540*z10^4*z3*z4^3*z5*z7 + 900*z10^3*z11*z3*z4^3*z5*z7 +
  324*z10^4*z4^4*z5*z7 - 540*z10^3*z11*z4^4*z5*z7 - 540*z10^4*z8 + 900*z10^3*z11*z8 +
  1080*z1*z10^4*z2*z3*z4^2*z8 - 1800*z1*z10^3*z11*z2*z3*z4^2*z8 - 540*z1*z10^4*z2*z4^3*z8 +
  900*z1*z10^3*z11*z2*z4^3*z8 - 540*z1*z10^4*z3*z4^3*z8 + 900*z1*z10^3*z11*z3*z4^3*z8 - 540*z10^4*z2*z3*z4^3*z8 +
  900*z10^3*z11*z2*z3*z4^3*z8 + 324*z1*z10^4*z4^4*z8 - 540*z1*z10^3*z11*z4^4*z8 + 324*z10^4*z2*z4^4*z8 -
  540*z10^3*z11*z2*z4^4*z8 + 324*z10^4*z3*z4^4*z8 - 540*z10^3*z11*z3*z4^4*z8 - 216*z10^4*z4^5*z8 +
  360*z10^3*z11*z4^5*z8 + 1080*z1*z10^4*z2*z4^2*z5*z8 - 1800*z1*z10^3*z11*z2*z4^2*z5*z8 +
  1080*z1*z10^4*z3*z4^2*z5*z8 - 1800*z1*z10^3*z11*z3*z4^2*z5*z8 + 1080*z10^4*z2*z3*z4^2*z5*z8 -
  1800*z10^3*z11*z2*z3*z4^2*z5*z8 - 540*z1*z10^4*z4^3*z5*z8 + 900*z1*z10^3*z11*z4^3*z5*z8 -
  540*z10^4*z2*z4^3*z5*z8 + 900*z10^3*z11*z2*z4^3*z5*z8 - 540*z10^4*z3*z4^3*z5*z8 + 900*z10^3*z11*z3*z4^3*z5*z8 +
  324*z10^4*z4^4*z5*z8 - 540*z10^3*z11*z4^4*z5*z8 + 900*z10^3*z7*z8 - 1800*z10^2*z11*z7*z8 -
  1800*z1*z10^3*z2*z3*z4^2*z7*z8 + 3600*z1*z10^2*z11*z2*z3*z4^2*z7*z8 + 900*z1*z10^3*z2*z4^3*z7*z8 -
  1800*z1*z10^2*z11*z2*z4^3*z7*z8 + 900*z1*z10^3*z3*z4^3*z7*z8 - 1800*z1*z10^2*z11*z3*z4^3*z7*z8 +
  900*z10^3*z2*z3*z4^3*z7*z8 - 1800*z10^2*z11*z2*z3*z4^3*z7*z8 - 540*z1*z10^3*z4^4*z7*z8 +
  1080*z1*z10^2*z11*z4^4*z7*z8 - 540*z10^3*z2*z4^4*z7*z8 + 1080*z10^2*z11*z2*z4^4*z7*z8 -
  540*z10^3*z3*z4^4*z7*z8 + 1080*z10^2*z11*z3*z4^4*z7*z8 + 360*z10^3*z4^5*z7*z8 - 720*z10^2*z11*z4^5*z7*z8 -
  1800*z1*z10^3*z2*z4^2*z5*z7*z8 + 3600*z1*z10^2*z11*z2*z4^2*z5*z7*z8 - 1800*z1*z10^3*z3*z4^2*z5*z7*z8 +
  3600*z1*z10^2*z11*z3*z4^2*z5*z7*z8 - 1800*z10^3*z2*z3*z4^2*z5*z7*z8 + 3600*z10^2*z11*z2*z3*z4^2*z5*z7*z8 +
  900*z1*z10^3*z4^3*z5*z7*z8 - 1800*z1*z10^2*z11*z4^3*z5*z7*z8 + 900*z10^3*z2*z4^3*z5*z7*z8 -
  1800*z10^2*z11*z2*z4^3*z5*z7*z8 + 900*z10^3*z3*z4^3*z5*z7*z8 - 1800*z10^2*z11*z3*z4^3*z5*z7*z8 -
  540*z10^3*z4^4*z5*z7*z8 + 1080*z10^2*z11*z4^4*z5*z7*z8 - 540*z10^4*z9 + 900*z10^3*z11*z9 +
  1080*z1*z10^4*z2*z3*z4^2*z9 - 1800*z1*z10^3*z11*z2*z3*z4^2*z9 - 540*z1*z10^4*z2*z4^3*z9 +
  900*z1*z10^3*z11*z2*z4^3*z9 - 540*z1*z10^4*z3*z4^3*z9 + 900*z1*z10^3*z11*z3*z4^3*z9 - 540*z10^4*z2*z3*z4^3*z9 +
  900*z10^3*z11*z2*z3*z4^3*z9 + 324*z1*z10^4*z4^4*z9 - 540*z1*z10^3*z11*z4^4*z9 + 324*z10^4*z2*z4^4*z9 -
  540*z10^3*z11*z2*z4^4*z9 + 324*z10^4*z3*z4^4*z9 - 540*z10^3*z11*z3*z4^4*z9 - 216*z10^4*z4^5*z9 +
  360*z10^3*z11*z4^5*z9 + 1080*z1*z10^4*z2*z4^2*z5*z9 - 1800*z1*z10^3*z11*z2*z4^2*z5*z9 +
  1080*z1*z10^4*z3*z4^2*z5*z9 - 1800*z1*z10^3*z11*z3*z4^2*z5*z9 + 1080*z10^4*z2*z3*z4^2*z5*z9 -
  1800*z10^3*z11*z2*z3*z4^2*z5*z9 - 540*z1*z10^4*z4^3*z5*z9 + 900*z1*z10^3*z11*z4^3*z5*z9 -
  540*z10^4*z2*z4^3*z5*z9 + 900*z10^3*z11*z2*z4^3*z5*z9 - 540*z10^4*z3*z4^3*z5*z9 + 900*z10^3*z11*z3*z4^3*z5*z9 +
  324*z10^4*z4^4*z5*z9 - 540*z10^3*z11*z4^4*z5*z9 + 900*z10^3*z7*z9 - 1800*z10^2*z11*z7*z9 -
  1800*z1*z10^3*z2*z3*z4^2*z7*z9 + 3600*z1*z10^2*z11*z2*z3*z4^2*z7*z9 + 900*z1*z10^3*z2*z4^3*z7*z9 -
  1800*z1*z10^2*z11*z2*z4^3*z7*z9 + 900*z1*z10^3*z3*z4^3*z7*z9 - 1800*z1*z10^2*z11*z3*z4^3*z7*z9 +
  900*z10^3*z2*z3*z4^3*z7*z9 - 1800*z10^2*z11*z2*z3*z4^3*z7*z9 - 540*z1*z10^3*z4^4*z7*z9 +
  1080*z1*z10^2*z11*z4^4*z7*z9 - 540*z10^3*z2*z4^4*z7*z9 + 1080*z10^2*z11*z2*z4^4*z7*z9 -
  540*z10^3*z3*z4^4*z7*z9 + 1080*z10^2*z11*z3*z4^4*z7*z9 + 360*z10^3*z4^5*z7*z9 - 720*z10^2*z11*z4^5*z7*z9 -
  1800*z1*z10^3*z2*z4^2*z5*z7*z9 + 3600*z1*z10^2*z11*z2*z4^2*z5*z7*z9 - 1800*z1*z10^3*z3*z4^2*z5*z7*z9 +
  3600*z1*z10^2*z11*z3*z4^2*z5*z7*z9 - 1800*z10^3*z2*z3*z4^2*z5*z7*z9 + 3600*z10^2*z11*z2*z3*z4^2*z5*z7*z9 +
  900*z1*z10^3*z4^3*z5*z7*z9 - 1800*z1*z10^2*z11*z4^3*z5*z7*z9 + 900*z10^3*z2*z4^3*z5*z7*z9 -
  1800*z10^2*z11*z2*z4^3*z5*z7*z9 + 900*z10^3*z3*z4^3*z5*z7*z9 - 1800*z10^2*z11*z3*z4^3*z5*z7*z9 -
  540*z10^3*z4^4*z5*z7*z9 + 1080*z10^2*z11*z4^4*z5*z7*z9 + 900*z10^3*z8*z9 - 1800*z10^2*z11*z8*z9 -
  1800*z1*z10^3*z2*z3*z4^2*z8*z9 + 3600*z1*z10^2*z11*z2*z3*z4^2*z8*z9 + 900*z1*z10^3*z2*z4^3*z8*z9 -
  1800*z1*z10^2*z11*z2*z4^3*z8*z9 + 900*z1*z10^3*z3*z4^3*z8*z9 - 1800*z1*z10^2*z11*z3*z4^3*z8*z9 +
  900*z10^3*z2*z3*z4^3*z8*z9 - 1800*z10^2*z11*z2*z3*z4^3*z8*z9 - 540*z1*z10^3*z4^4*z8*z9 +
  1080*z1*z10^2*z11*z4^4*z8*z9 - 540*z10^3*z2*z4^4*z8*z9 + 1080*z10^2*z11*z2*z4^4*z8*z9 -
  540*z10^3*z3*z4^4*z8*z9 + 1080*z10^2*z11*z3*z4^4*z8*z9 + 360*z10^3*z4^5*z8*z9 - 720*z10^2*z11*z4^5*z8*z9 -
  1800*z1*z10^3*z2*z4^2*z5*z8*z9 + 3600*z1*z10^2*z11*z2*z4^2*z5*z8*z9 - 1800*z1*z10^3*z3*z4^2*z5*z8*z9 +
  3600*z1*z10^2*z11*z3*z4^2*z5*z8*z9 - 1800*z10^3*z2*z3*z4^2*z5*z8*z9 + 3600*z10^2*z11*z2*z3*z4^2*z5*z8*z9 +
  900*z1*z10^3*z4^3*z5*z8*z9 - 1800*z1*z10^2*z11*z4^3*z5*z8*z9 + 900*z10^3*z2*z4^3*z5*z8*z9 -
  1800*z10^2*z11*z2*z4^3*z5*z8*z9 + 900*z10^3*z3*z4^3*z5*z8*z9 - 1800*z10^2*z11*z3*z4^3*z5*z8*z9 -
  540*z10^3*z4^4*z5*z8*z9 + 1080*z10^2*z11*z4^4*z5*z8*z9 - 1800*z10^2*z7*z8*z9 +
  3600*z1*z10^2*z2*z3*z4^2*z7*z8*z9 - 1800*z1*z10^2*z2*z4^3*z7*z8*z9 - 1800*z1*z10^2*z3*z4^3*z7*z8*z9 -
  1800*z10^2*z2*z3*z4^3*z7*z8*z9 + 1080*z1*z10^2*z4^4*z7*z8*z9 + 1080*z10^2*z2*z4^4*z7*z8*z9 +
  1080*z10^2*z3*z4^4*z7*z8*z9 - 720*z10^2*z4^5*z7*z8*z9 + 3600*z1*z10^2*z2*z4^2*z5*z7*z8*z9 +
  3600*z1*z10^2*z3*z4^2*z5*z7*z8*z9 + 3600*z10^2*z2*z3*z4^2*z5*z7*z8*z9 - 1800*z1*z10^2*z4^3*z5*z7*z8*z9 -
  1800*z10^2*z2*z4^3*z5*z7*z8*z9 - 1800*z10^2*z3*z4^3*z5*z7*z8*z9 + 1080*z10^2*z4^4*z5*z7*z8*z9 - 3600*z6*z12
g5 = 900 - 540*z10*z11^4 + 360*z11^5 - 1800*z1*z2*z3*z5^2 + 1080*z1*z10*z11^4*z2*z3*z5^2 - 720*z1*z11^5*z2*z3*z5^2 -
  1800*z1*z2*z4*z5^2 + 1080*z1*z10*z11^4*z2*z4*z5^2 - 720*z1*z11^5*z2*z4*z5^2 - 1800*z1*z3*z4*z5^2 +
  1080*z1*z10*z11^4*z3*z4*z5^2 - 720*z1*z11^5*z3*z4*z5^2 - 1800*z2*z3*z4*z5^2 + 1080*z10*z11^4*z2*z3*z4*z5^2 -
  720*z11^5*z2*z3*z4*z5^2 + 900*z1*z2*z5^3 - 540*z1*z10*z11^4*z2*z5^3 + 360*z1*z11^5*z2*z5^3 + 900*z1*z3*z5^3 -
  540*z1*z10*z11^4*z3*z5^3 + 360*z1*z11^5*z3*z5^3 + 900*z2*z3*z5^3 - 540*z10*z11^4*z2*z3*z5^3 +
  360*z11^5*z2*z3*z5^3 + 900*z1*z4*z5^3 - 540*z1*z10*z11^4*z4*z5^3 + 360*z1*z11^5*z4*z5^3 + 900*z2*z4*z5^3 -
  540*z10*z11^4*z2*z4*z5^3 + 360*z11^5*z2*z4*z5^3 + 900*z3*z4*z5^3 - 540*z10*z11^4*z3*z4*z5^3 +
  360*z11^5*z3*z4*z5^3 - 540*z1*z5^4 + 324*z1*z10*z11^4*z5^4 - 216*z1*z11^5*z5^4 - 540*z2*z5^4 +
  324*z10*z11^4*z2*z5^4 - 216*z11^5*z2*z5^4 - 540*z3*z5^4 + 324*z10*z11^4*z3*z5^4 - 216*z11^5*z3*z5^4 -
  540*z4*z5^4 + 324*z10*z11^4*z4*z5^4 - 216*z11^5*z4*z5^4 + 360*z5^5 - 216*z10*z11^4*z5^5 + 144*z11^5*z5^5 +
  900*z10*z11^3*z7 - 540*z11^4*z7 - 1800*z1*z10*z11^3*z2*z3*z5^2*z7 + 1080*z1*z11^4*z2*z3*z5^2*z7 -
  1800*z1*z10*z11^3*z2*z4*z5^2*z7 + 1080*z1*z11^4*z2*z4*z5^2*z7 - 1800*z1*z10*z11^3*z3*z4*z5^2*z7 +
  1080*z1*z11^4*z3*z4*z5^2*z7 - 1800*z10*z11^3*z2*z3*z4*z5^2*z7 + 1080*z11^4*z2*z3*z4*z5^2*z7 +
  900*z1*z10*z11^3*z2*z5^3*z7 - 540*z1*z11^4*z2*z5^3*z7 + 900*z1*z10*z11^3*z3*z5^3*z7 - 540*z1*z11^4*z3*z5^3*z7 +
  900*z10*z11^3*z2*z3*z5^3*z7 - 540*z11^4*z2*z3*z5^3*z7 + 900*z1*z10*z11^3*z4*z5^3*z7 - 540*z1*z11^4*z4*z5^3*z7 +
  900*z10*z11^3*z2*z4*z5^3*z7 - 540*z11^4*z2*z4*z5^3*z7 + 900*z10*z11^3*z3*z4*z5^3*z7 - 540*z11^4*z3*z4*z5^3*z7 -
  540*z1*z10*z11^3*z5^4*z7 + 324*z1*z11^4*z5^4*z7 - 540*z10*z11^3*z2*z5^4*z7 + 324*z11^4*z2*z5^4*z7 -
  540*z10*z11^3*z3*z5^4*z7 + 324*z11^4*z3*z5^4*z7 - 540*z10*z11^3*z4*z5^4*z7 + 324*z11^4*z4*z5^4*z7 +
  360*z10*z11^3*z5^5*z7 - 216*z11^4*z5^5*z7 + 900*z10*z11^3*z8 - 540*z11^4*z8 - 1800*z1*z10*z11^3*z2*z3*z5^2*z8 +
  1080*z1*z11^4*z2*z3*z5^2*z8 - 1800*z1*z10*z11^3*z2*z4*z5^2*z8 + 1080*z1*z11^4*z2*z4*z5^2*z8 -
  1800*z1*z10*z11^3*z3*z4*z5^2*z8 + 1080*z1*z11^4*z3*z4*z5^2*z8 - 1800*z10*z11^3*z2*z3*z4*z5^2*z8 +
  1080*z11^4*z2*z3*z4*z5^2*z8 + 900*z1*z10*z11^3*z2*z5^3*z8 - 540*z1*z11^4*z2*z5^3*z8 +
  900*z1*z10*z11^3*z3*z5^3*z8 - 540*z1*z11^4*z3*z5^3*z8 + 900*z10*z11^3*z2*z3*z5^3*z8 - 540*z11^4*z2*z3*z5^3*z8 +
  900*z1*z10*z11^3*z4*z5^3*z8 - 540*z1*z11^4*z4*z5^3*z8 + 900*z10*z11^3*z2*z4*z5^3*z8 - 540*z11^4*z2*z4*z5^3*z8 +
  900*z10*z11^3*z3*z4*z5^3*z8 - 540*z11^4*z3*z4*z5^3*z8 - 540*z1*z10*z11^3*z5^4*z8 + 324*z1*z11^4*z5^4*z8 -
  540*z10*z11^3*z2*z5^4*z8 + 324*z11^4*z2*z5^4*z8 - 540*z10*z11^3*z3*z5^4*z8 + 324*z11^4*z3*z5^4*z8 -
  540*z10*z11^3*z4*z5^4*z8 + 324*z11^4*z4*z5^4*z8 + 360*z10*z11^3*z5^5*z8 - 216*z11^4*z5^5*z8 -
  1800*z10*z11^2*z7*z8 + 900*z11^3*z7*z8 + 3600*z1*z10*z11^2*z2*z3*z5^2*z7*z8 - 1800*z1*z11^3*z2*z3*z5^2*z7*z8 +
  3600*z1*z10*z11^2*z2*z4*z5^2*z7*z8 - 1800*z1*z11^3*z2*z4*z5^2*z7*z8 + 3600*z1*z10*z11^2*z3*z4*z5^2*z7*z8 -
  1800*z1*z11^3*z3*z4*z5^2*z7*z8 + 3600*z10*z11^2*z2*z3*z4*z5^2*z7*z8 - 1800*z11^3*z2*z3*z4*z5^2*z7*z8 -
  1800*z1*z10*z11^2*z2*z5^3*z7*z8 + 900*z1*z11^3*z2*z5^3*z7*z8 - 1800*z1*z10*z11^2*z3*z5^3*z7*z8 +
  900*z1*z11^3*z3*z5^3*z7*z8 - 1800*z10*z11^2*z2*z3*z5^3*z7*z8 + 900*z11^3*z2*z3*z5^3*z7*z8 -
  1800*z1*z10*z11^2*z4*z5^3*z7*z8 + 900*z1*z11^3*z4*z5^3*z7*z8 - 1800*z10*z11^2*z2*z4*z5^3*z7*z8 +
  900*z11^3*z2*z4*z5^3*z7*z8 - 1800*z10*z11^2*z3*z4*z5^3*z7*z8 + 900*z11^3*z3*z4*z5^3*z7*z8 +
  1080*z1*z10*z11^2*z5^4*z7*z8 - 540*z1*z11^3*z5^4*z7*z8 + 1080*z10*z11^2*z2*z5^4*z7*z8 -
  540*z11^3*z2*z5^4*z7*z8 + 1080*z10*z11^2*z3*z5^4*z7*z8 - 540*z11^3*z3*z5^4*z7*z8 +
  1080*z10*z11^2*z4*z5^4*z7*z8 - 540*z11^3*z4*z5^4*z7*z8 - 720*z10*z11^2*z5^5*z7*z8 + 360*z11^3*z5^5*z7*z8 +
  900*z10*z11^3*z9 - 540*z11^4*z9 - 1800*z1*z10*z11^3*z2*z3*z5^2*z9 + 1080*z1*z11^4*z2*z3*z5^2*z9 -
  1800*z1*z10*z11^3*z2*z4*z5^2*z9 + 1080*z1*z11^4*z2*z4*z5^2*z9 - 1800*z1*z10*z11^3*z3*z4*z5^2*z9 +
  1080*z1*z11^4*z3*z4*z5^2*z9 - 1800*z10*z11^3*z2*z3*z4*z5^2*z9 + 1080*z11^4*z2*z3*z4*z5^2*z9 +
  900*z1*z10*z11^3*z2*z5^3*z9 - 540*z1*z11^4*z2*z5^3*z9 + 900*z1*z10*z11^3*z3*z5^3*z9 - 540*z1*z11^4*z3*z5^3*z9 +
  900*z10*z11^3*z2*z3*z5^3*z9 - 540*z11^4*z2*z3*z5^3*z9 + 900*z1*z10*z11^3*z4*z5^3*z9 - 540*z1*z11^4*z4*z5^3*z9 +
  900*z10*z11^3*z2*z4*z5^3*z9 - 540*z11^4*z2*z4*z5^3*z9 + 900*z10*z11^3*z3*z4*z5^3*z9 - 540*z11^4*z3*z4*z5^3*z9 -
  540*z1*z10*z11^3*z5^4*z9 + 324*z1*z11^4*z5^4*z9 - 540*z10*z11^3*z2*z5^4*z9 + 324*z11^4*z2*z5^4*z9 -
  540*z10*z11^3*z3*z5^4*z9 + 324*z11^4*z3*z5^4*z9 - 540*z10*z11^3*z4*z5^4*z9 + 324*z11^4*z4*z5^4*z9 +
  360*z10*z11^3*z5^5*z9 - 216*z11^4*z5^5*z9 - 1800*z10*z11^2*z7*z9 + 900*z11^3*z7*z9 +
  3600*z1*z10*z11^2*z2*z3*z5^2*z7*z9 - 1800*z1*z11^3*z2*z3*z5^2*z7*z9 + 3600*z1*z10*z11^2*z2*z4*z5^2*z7*z9 -
  1800*z1*z11^3*z2*z4*z5^2*z7*z9 + 3600*z1*z10*z11^2*z3*z4*z5^2*z7*z9 - 1800*z1*z11^3*z3*z4*z5^2*z7*z9 +
  3600*z10*z11^2*z2*z3*z4*z5^2*z7*z9 - 1800*z11^3*z2*z3*z4*z5^2*z7*z9 - 1800*z1*z10*z11^2*z2*z5^3*z7*z9 +
  900*z1*z11^3*z2*z5^3*z7*z9 - 1800*z1*z10*z11^2*z3*z5^3*z7*z9 + 900*z1*z11^3*z3*z5^3*z7*z9 -
  1800*z10*z11^2*z2*z3*z5^3*z7*z9 + 900*z11^3*z2*z3*z5^3*z7*z9 - 1800*z1*z10*z11^2*z4*z5^3*z7*z9 +
  900*z1*z11^3*z4*z5^3*z7*z9 - 1800*z10*z11^2*z2*z4*z5^3*z7*z9 + 900*z11^3*z2*z4*z5^3*z7*z9 -
  1800*z10*z11^2*z3*z4*z5^3*z7*z9 + 900*z11^3*z3*z4*z5^3*z7*z9 + 1080*z1*z10*z11^2*z5^4*z7*z9 -
  540*z1*z11^3*z5^4*z7*z9 + 1080*z10*z11^2*z2*z5^4*z7*z9 - 540*z11^3*z2*z5^4*z7*z9 +
  1080*z10*z11^2*z3*z5^4*z7*z9 - 540*z11^3*z3*z5^4*z7*z9 + 1080*z10*z11^2*z4*z5^4*z7*z9 -
  540*z11^3*z4*z5^4*z7*z9 - 720*z10*z11^2*z5^5*z7*z9 + 360*z11^3*z5^5*z7*z9 - 1800*z10*z11^2*z8*z9 +
  900*z11^3*z8*z9 + 3600*z1*z10*z11^2*z2*z3*z5^2*z8*z9 - 1800*z1*z11^3*z2*z3*z5^2*z8*z9 +
  3600*z1*z10*z11^2*z2*z4*z5^2*z8*z9 - 1800*z1*z11^3*z2*z4*z5^2*z8*z9 + 3600*z1*z10*z11^2*z3*z4*z5^2*z8*z9 -
  1800*z1*z11^3*z3*z4*z5^2*z8*z9 + 3600*z10*z11^2*z2*z3*z4*z5^2*z8*z9 - 1800*z11^3*z2*z3*z4*z5^2*z8*z9 -
  1800*z1*z10*z11^2*z2*z5^3*z8*z9 + 900*z1*z11^3*z2*z5^3*z8*z9 - 1800*z1*z10*z11^2*z3*z5^3*z8*z9 +
  900*z1*z11^3*z3*z5^3*z8*z9 - 1800*z10*z11^2*z2*z3*z5^3*z8*z9 + 900*z11^3*z2*z3*z5^3*z8*z9 -
  1800*z1*z10*z11^2*z4*z5^3*z8*z9 + 900*z1*z11^3*z4*z5^3*z8*z9 - 1800*z10*z11^2*z2*z4*z5^3*z8*z9 +
  900*z11^3*z2*z4*z5^3*z8*z9 - 1800*z10*z11^2*z3*z4*z5^3*z8*z9 + 900*z11^3*z3*z4*z5^3*z8*z9 +
  1080*z1*z10*z11^2*z5^4*z8*z9 - 540*z1*z11^3*z5^4*z8*z9 + 1080*z10*z11^2*z2*z5^4*z8*z9 -
  540*z11^3*z2*z5^4*z8*z9 + 1080*z10*z11^2*z3*z5^4*z8*z9 - 540*z11^3*z3*z5^4*z8*z9 +
  1080*z10*z11^2*z4*z5^4*z8*z9 - 540*z11^3*z4*z5^4*z8*z9 - 720*z10*z11^2*z5^5*z8*z9 + 360*z11^3*z5^5*z8*z9 -
  1800*z11^2*z7*z8*z9 + 3600*z1*z11^2*z2*z3*z5^2*z7*z8*z9 + 3600*z1*z11^2*z2*z4*z5^2*z7*z8*z9 +
  3600*z1*z11^2*z3*z4*z5^2*z7*z8*z9 + 3600*z11^2*z2*z3*z4*z5^2*z7*z8*z9 - 1800*z1*z11^2*z2*z5^3*z7*z8*z9 -
  1800*z1*z11^2*z3*z5^3*z7*z8*z9 - 1800*z11^2*z2*z3*z5^3*z7*z8*z9 - 1800*z1*z11^2*z4*z5^3*z7*z8*z9 -
  1800*z11^2*z2*z4*z5^3*z7*z8*z9 - 1800*z11^2*z3*z4*z5^3*z7*z8*z9 + 1080*z1*z11^2*z5^4*z7*z8*z9 +
  1080*z11^2*z2*z5^4*z7*z8*z9 + 1080*z11^2*z3*z5^4*z7*z8*z9 + 1080*z11^2*z4*z5^4*z7*z8*z9 -
  720*z11^2*z5^5*z7*z8*z9 - 3600*z6*z12
h1 = z1*z7 + z2*z8 + z3*z9 + z4*z10 + z5*z11 - n*(1/(n+1))^(2/n)
h2 = 3*z1*z2*z3*z4*z5 + 3*z7*z8*z9*z10*z11 + 1
h3 = 36*z1*z2*z3*z4*z5*z7*z8*z9*z10*z11 - 1
cpop = [f; g1; g2; g3; g4; g5; h1; h2; h3]

@time begin
opt,sol,data = cs_tssos_first(cpop, z, n+1, 5, numeq=3, CS=false, TS="block", QUIET=true, solve=false, normality=1)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true)
end
println(sqrt(-opt))

# Mordell Inequality Conjecture
n = 2
@polyvar z1 z2 z3 z4
z = tuple(z1,z2,z3,z4)
f = (z1-z2)*(z3-z4)*(2z1+z2)*(2z3+z4)*(2z2+z1)*(2z4+z3)
h = 2*z1*z3 + 2*z2*z4 + z1*z4 + z2*z3 - 3

n = 3
@polyvar z1 z2 z3 z4 z5 z6
z = tuple(z1,z2,z3,z4,z5,z6)
f = (z1-z2)*(z4-z5)*(z1-z3)*(z4-z6)*(2z1+z2+z3)*(2z4+z5+z6)*(z2-z3)*(z5-z6)*(2z2+z1+z3)*(2z5+z4+z6)*(2z3+z1+z2)*(2z6+z4+z5)
h = z1*z4 + z2*z5 + z3*z6 + (z1+z2+z3)*(z4+z5+z6) - 4

n = 4
@polyvar z1 z2 z3 z4 z5 z6 z7 z8
z = tuple(z1,z2,z3,z4,z5,z6,z7,z8)
f = (z1-z2)*(z5-z6)*(z1-z3)*(z5-z7)*(z1-z4)*(z5-z8)*(z2-z3)*(z6-z7)*(z2-z4)*(z6-z8)*(z3-z4)*(z7-z8)*
(2z1+z2+z3+z4)*(2z5+z6+z7+z8)*(2z2+z1+z3+z4)*(2z6+z5+z7+z8)*(2z3+z1+z2+z4)*(2z7+z5+z6+z8)*(2z4+z1+z2+z3)*(2z8+z5+z6+z7)
h = z1*z5 + z2*z6 + z3*z7 + z4*z8 + (z1+z2+z3+z4)*(z5+z6+z7+z8) - 5

cpop = [-f; h]
@time begin
opt,sol,data = cs_tssos_first(cpop, z, n, 6, numeq=1, CS=false, TS="block", normality=5, solve=false, QUIET=true)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true, solve=false)
opt,sol,data = cs_tssos_higher!(data, TS="block", QUIET=true)
end
